# -*- coding: utf-8 -*-
"""World Bank Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19yBpQ3A2Kem92Bk_ClAoQQnFObhvRB8f

#Shruti Baravkar
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

#Load the datasets
country = pd.read_csv("Metadata_Country.csv")
population = pd.read_csv("country_population.csv")
fertility = pd.read_csv("fertility_rate.csv")
life_expectancy = pd.read_csv("life_expectancy.csv")

"""##**Metadata Country dataset**"""

#Check the shape of the dataset i.e., to see the number of rows and columns respectively
print("Shape of dataset :")
country.shape

#Check the initial observation of our dataset
print("Initial observation of dataset :")
country.head()

#Let's check the data types of our attributes/columns
print("Data types of dataset :")
country.dtypes

#Let's check the statistical summary of our dataset
print("Statistical summary of dataset :")
country.describe()

#Let's check information of our dataset i.e., information about dtype , non-null values , memory usage
print("Information of dataset :")
country.info()

#Dropping columns that are not required in the 'country' dataset
columns_to_drop = ['IncomeGroup', 'SpecialNotes', 'TableName', 'Unnamed: 5']
country.drop(columns=columns_to_drop, inplace=True)
country.head(10)

#Let's check null values
null_values = country.isnull().sum()
print("Number of null values : ")
print(null_values)

"""##**Country Population Dataset**"""

#Check the shape of the dataset i.e., to see the number of rows and columns respectively
print("Shape of dataset :")
population.shape

#Check the initial observation of our dataset
print("Initial observation of dataset :")
population.head()

#Let's check the data types of our attributes/columns
print("Data types of dataset :")
population.dtypes

#Let's check the statistical summary of our dataset
print("Statistical summary of dataset :")
population.describe()

#Let's check information of our dataset i.e., information about dtype , non-null values , memory usage
print("Information of dataset :")
population.info()

#Dropping columns that are not required in the 'population' dataset
columns_to_drop = ['Indicator Name', 'Indicator Code']
population.drop(columns=columns_to_drop, inplace=True)
population.head(10)

#Let's check null values
null_values = population.isnull().sum()
print("Number of null values : ")
print(null_values)

#Replacing null values with mean
years = [str(year) for year in range(1960, 2017)]
population[years] = population[years].astype('float64')

#For loop to replace the mean value of column with the NaN values
for year in years:
    population[year].fillna(population[year].mean(), inplace=True)

#Displaying first 10 values of the dataset
population.head(10)

#Checking again for null values
null_values = population.isnull().sum()
print("Number of null values : ")
print(null_values)

#Melting the dataset
melted_population = pd.melt(population,
        id_vars='Country Code',
        value_vars=years,
        var_name='Year',
        value_name='Population')

#Getting the shape of the melted dataset
melted_population.shape

#Displaying first 10 values of the dataset
melted_population.head(10)

"""#Merging the 'country' and 'population' dataset"""

#Merging the 'country' and 'population' dataset
country_and_population_merge = pd.merge(country, melted_population,how='left',on='Country Code')

#Displaying first 10 values of the dataset
country_and_population_merge.head(10)

"""##**Fertility dataset**"""

#Check the shape of the dataset i.e., to see the number of rows and columns respectively
print("Shape of dataset :")
fertility.shape

#Check the initial observation of our dataset
print("Initial observation of dataset :")
fertility.head()

#Let's check the data types of our attributes/columns
print("Data types of dataset :")
fertility.dtypes

#Let's check the statistical summary of our dataset
print("Statistical summary of dataset :")
fertility.describe()

#Let's check information of our dataset i.e., information about dtype , non-null values , memory usage
print("Information of dataset :")
fertility.info()

#Dropping columns that are not required in the 'fertility' dataset
columns_to_drop = ['Indicator Name', 'Indicator Code']
fertility.drop(columns=columns_to_drop, inplace=True)
fertility.head(10)

#Let's check null values
null_values = fertility.isnull().sum()
print("Number of null values : ")
print(null_values)

#Replacing null values with mean
years = [str(year) for year in range(1960, 2017)]
fertility[years] = fertility[years].astype('float64')

# For loop to replace the mean value of column with the NaN values
for year in years:
    fertility[year].fillna(fertility[year].mean(), inplace=True)

# Displaying first 5 values of the dataset
fertility.head()

#Checking again for null values
null_values = fertility.isnull().sum()
print("Number of null values : ")
print(null_values)

#Melting the dataset
melted_fertility = pd.melt(fertility,
        id_vars='Country Code',
        value_vars=years,
        var_name='Year',
        value_name='Fertility')

#Getting the shape of the melted dataset
melted_fertility.shape

#Displaying first 10 values of the dataset
melted_fertility.head(10)

"""#Merging the 'country-population' and 'fertility' dataset"""

#Merging the 'country-population' and 'fertility' dataset
country_population_fertility_merge = pd.merge(country_and_population_merge, melted_fertility, how='left', on = ['Country Code', 'Year'])

#Displaying first 10 values of the dataset
country_population_fertility_merge.head(10)

"""##**Life expectancy dataset**"""

#Check the shape of the dataset i.e., to see the number of rows and columns respectively
print("Shape of dataset :")
life_expectancy.shape

#Check the initial observation of our dataset
print("Initial observation of dataset :")
life_expectancy.head()

#Let's check the data types of our attributes/columns
print("Data types of dataset :")
life_expectancy.dtypes

#Let's check the statistical summary of our dataset
print("Statistical summary of dataset :")
life_expectancy.describe()

#Let's check information of our dataset i.e., information about dtype , non-null values , memory usage
print("Information of dataset :")
life_expectancy.info()

#Dropping columns that are not required in the 'life_expectancy' dataset
columns_to_drop = ['Indicator Name', 'Indicator Code']
life_expectancy.drop(columns=columns_to_drop, inplace=True)
country.head(10)

#Let's check null values
null_values = life_expectancy.isnull().sum()
print("Number of null values : ")
print(null_values)

#Replacing null values with mean
years = [str(year) for year in range(1960, 2017)]
life_expectancy[years] = life_expectancy[years].astype('float64')

#For loop to replace the mean value of column with the NaN values
for year in years:
    life_expectancy[year].fillna(life_expectancy[year].mean(), inplace=True)

#Displaying first 10 values of the dataset
life_expectancy.head(10)

#Checking again for null values
null_values = life_expectancy.isnull().sum()
print("Number of null values : ")
print(null_values)

#Melting the dataset
melted_life_expectancy = pd.melt(life_expectancy,
        id_vars='Country Code',
        value_vars=years,
        var_name='Year',
        value_name='Life Expectancy')

#Getting the shape of the melted dataset
melted_life_expectancy.shape

#Displaying first 10 values of the dataset
melted_life_expectancy.head(10)

"""#Merging the 'country-population-fertility' and 'life_expectancy' dataset"""

#Merging the 'country-population-fertility' and 'life_expectancy' dataset
country_population_fertility_life_expectancy_merge = pd.merge(country_population_fertility_merge, melted_life_expectancy, how='left', on = ['Country Code', 'Year'])

#Displaying first 10 values of the dataset
country_population_fertility_life_expectancy_merge.head(10)

"""#Creating a copy of the merged dataset and naming it as 'merged_final'"""

#Creating a copy of the merged dataset and naming it as 'merged_final'
merged_final = country_population_fertility_life_expectancy_merge.copy()

#Check the shape of the dataset i.e., to see the number of rows and columns respectively
print("Shape of dataset :")
merged_final.shape

#Check the initial observation of our dataset
print("Initial observation of dataset :")
merged_final.head()

#Let's check the data types of our attributes/columns
print("Data types of dataset :")
merged_final.dtypes

#Let's check the statistical summary of our dataset
print("Statistical summary of dataset :")
merged_final.describe()

#Let's check information of our dataset i.e., information about dtype , non-null values , memory usage
print("Information of dataset :")
merged_final.info()

#Converting the 'Year' column of 'merged_final' dataset as of integer datatype
merged_final['Year'] = merged_final['Year'].astype(int)

"""## **Data Visualization**"""

#Visualizing population trends accross different regions
avg_population = merged_final.groupby(['Region', 'Year'])['Population'].mean().reset_index()

plt.style.use('dark_background')
plt.figure(figsize=(16, 7))
for region in avg_population['Region'].unique():
    subset = avg_population[avg_population['Region'] == region]
    plt.plot(subset['Year'], subset['Population'], label=region, linestyle='-')

plt.title('Average Population Over The Years by Region', color='yellow')
plt.xlabel('Year', color='yellow')
plt.ylabel('Average Population', color='yellow')
plt.legend(facecolor='black', edgecolor='white', labelcolor='white')
plt.grid(True, color='gray', linestyle='--', linewidth=0.4)

years = avg_population['Year'].unique()
plt.xticks(years[::2], rotation=50, color='white')
plt.yticks(color='white')

plt.show()

#Visualizing fertility rate distribution accross different regions
avg_fertility_rate = merged_final.groupby('Region')['Fertility'].mean().reset_index()

plt.style.use('dark_background')
plt.figure(figsize=(16, 5))
plt.bar(avg_fertility_rate['Region'], avg_fertility_rate['Fertility'], color='skyblue')
plt.title('Average Fertility Rate by Region', color='yellow')
plt.xlabel('Region', color='yellow')
plt.ylabel('Average Fertility Rate', color='yellow')
plt.xticks(rotation=50)
plt.grid(True, color='gray', linestyle='--', linewidth=0.4)
plt.show()

#Visulaising	life expectancy variation accross different regions
plt.style.use('dark_background')
plt.figure(figsize=(16, 7))
sns.lineplot(data=merged_final, x='Year', y='Life Expectancy', hue='Region', palette='Set2', errorbar=None)
plt.title('Life Expectancy Variation by Region Over Time',color='yellow')
plt.xlabel('Year',color='yellow')
plt.ylabel('Life Expectancy',color='yellow')
plt.legend(facecolor='black', edgecolor='white', labelcolor='white')
plt.xticks(rotation=90)
plt.grid(True, color='gray', linestyle='--', linewidth=0.3)
plt.show()

#Creating a correlation Analysis
numerical_columns = merged_final.select_dtypes(include=['float64', 'int64']).columns

correlation_matrix = merged_final[numerical_columns].corr()

sns.set(style="white")

plt.figure(figsize=(12, 5))

cmap = sns.color_palette("flare", as_cmap=True)
sns.heatmap(correlation_matrix, cmap=cmap, vmax=.3, center=0,
            linewidths=.5, cbar_kws={"shrink": .5},
            annot=True, fmt=".2f", annot_kws={"size": 10, "color": 'black'})

plt.title('Correlation Heatmap(matrix) of Numerical Columns')

plt.show()

#Creating animated Bubble Chart for Fertility vs Life Expectancy by Region
fig = px.scatter(merged_final,
                 x='Fertility',
                 y='Life Expectancy',
                 size='Population',
                 color='Region',
                 hover_name='Country Code',
                 animation_frame='Year',
                 animation_group='Country Code',
                 template='plotly_dark',
                 size_max=95,
                 range_x=[0, 10],
                 range_y=[20, 85],
                 title='Animated Bubble Chart: Fertility vs Life Expectancy by Region',
                 labels={'Fertility': 'Fertility', 'Life Expectancy': 'Life Expectancy', 'Population': 'Population', 'Region': 'Region', 'Country Code': 'Country Code'})

fig.update_layout(
    xaxis_title='Fertility',
    yaxis_title='Life Expectancy',
    legend_title='Region',
    hoverlabel=dict(
        bgcolor='white',
        font_size=12,
        font_family='Arial, sans-serif'))

fig.show()